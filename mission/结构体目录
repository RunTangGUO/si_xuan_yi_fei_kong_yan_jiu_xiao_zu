结构体目录
struct vehicle_command_s {

	uint64_t timestamp; // required for logger
	double param5;//lat
	double param6;//lon
	float param1;
	float param2;
	float param3;
	float param4;//yaw
	float param7;//alt
	uint32_t command;
	uint32_t target_system;
	uint32_t target_component;
	uint32_t source_system;
	uint32_t source_component;
	uint8_t confirmation;
	uint8_t _padding0[7]; // required for logger
	}
	
struct position_setpoint_triplet_s {
	uint64_t timestamp; // required for logger
	uint8_t nav_state;
	uint8_t _padding0[7]; // required for logger
	struct position_setpoint_s previous;
	struct position_setpoint_s current;
	struct position_setpoint_s next;
};

struct position_setpoint_s {//可能存储目标航点的结构体
	uint64_t timestamp; // required for logger
	double lat;
	double lon;
	float x;
	float y;
	float z;
	float vx;
	float vy;
	float vz;
	float alt;
	float yaw;
	float yawspeed;
	float loiter_radius;
	float pitch_min;
	float a_x;
	float a_y;
	float a_z;
	float acceptance_radius;
	float cruising_speed;
	float cruising_throttle;
	bool valid;
	uint8_t type;
	bool position_valid;
	bool velocity_valid;
	bool yaw_valid;
	bool disable_mc_yaw_control;
	bool yawspeed_valid;
	int8_t loiter_direction;
	bool acceleration_valid;
	bool acceleration_is_force;
	uint8_t _padding0[2]; // required for logger

#ifdef __cplusplus
	static const uint8_t SETPOINT_TYPE_POSITION = 0;
	static const uint8_t SETPOINT_TYPE_VELOCITY = 1;
	static const uint8_t SETPOINT_TYPE_LOITER = 2;
	static const uint8_t SETPOINT_TYPE_TAKEOFF = 3;
	static const uint8_t SETPOINT_TYPE_LAND = 4;
	static const uint8_t SETPOINT_TYPE_IDLE = 5;
	static const uint8_t SETPOINT_TYPE_OFFBOARD = 6;
	static const uint8_t SETPOINT_TYPE_FOLLOW_TARGET = 7;

#endif
};
px4_pollfd_struct_t
typedef struct {
	/* This part of the struct is POSIX-like */
	int		fd;       /* The descriptor being polled */
	pollevent_t 	events;   /* The input event flags */
	pollevent_t 	revents;  /* The output event flags */

	/* Required for PX4 compatibility */
	px4_sem_t   *sem;  	/* Pointer to semaphore used to post output event */
	void   *priv;     	/* For use by drivers */
} px4_pollfd_struct_t;

struct vehicle_status_s {
	uint64_t timestamp; // required for logger
	uint32_t system_id;
	uint32_t component_id;
	uint32_t onboard_control_sensors_present;
	uint32_t onboard_control_sensors_enabled;
	uint32_t onboard_control_sensors_health;
	uint8_t nav_state;
	uint8_t arming_state;
	uint8_t hil_state;
	bool failsafe;
	uint8_t system_type;
	bool is_rotary_wing;
	bool is_vtol;
	bool vtol_fw_permanent_stab;
	bool in_transition_mode;
	bool rc_signal_lost;
	uint8_t rc_input_mode;
	bool data_link_lost;
	uint8_t data_link_lost_counter;
	bool engine_failure;
	bool engine_failure_cmd;
	bool mission_failure;
	uint8_t _padding0[4]; // required for logger

#ifdef __cplusplus
	static const uint8_t ARMING_STATE_INIT = 0;
	static const uint8_t ARMING_STATE_STANDBY = 1;
	static const uint8_t ARMING_STATE_ARMED = 2;
	static const uint8_t ARMING_STATE_ARMED_ERROR = 3;
	static const uint8_t ARMING_STATE_STANDBY_ERROR = 4;
	static const uint8_t ARMING_STATE_REBOOT = 5;
	static const uint8_t ARMING_STATE_IN_AIR_RESTORE = 6;
	static const uint8_t ARMING_STATE_MAX = 7;
	static const uint8_t HIL_STATE_OFF = 0;
	static const uint8_t HIL_STATE_ON = 1;
	static const uint8_t NAVIGATION_STATE_MANUAL = 0;
	static const uint8_t NAVIGATION_STATE_ALTCTL = 1;
	static const uint8_t NAVIGATION_STATE_POSCTL = 2;
	static const uint8_t NAVIGATION_STATE_AUTO_MISSION = 3;
	static const uint8_t NAVIGATION_STATE_AUTO_LOITER = 4;
	static const uint8_t NAVIGATION_STATE_AUTO_RTL = 5;
	static const uint8_t NAVIGATION_STATE_AUTO_RCRECOVER = 6;
	static const uint8_t NAVIGATION_STATE_AUTO_RTGS = 7;
	static const uint8_t NAVIGATION_STATE_AUTO_LANDENGFAIL = 8;
	static const uint8_t NAVIGATION_STATE_AUTO_LANDGPSFAIL = 9;
	static const uint8_t NAVIGATION_STATE_ACRO = 10;
	static const uint8_t NAVIGATION_STATE_UNUSED = 11;
	static const uint8_t NAVIGATION_STATE_DESCEND = 12;
	static const uint8_t NAVIGATION_STATE_TERMINATION = 13;
	static const uint8_t NAVIGATION_STATE_OFFBOARD = 14;
	static const uint8_t NAVIGATION_STATE_STAB = 15;
	static const uint8_t NAVIGATION_STATE_RATTITUDE = 16;
	static const uint8_t NAVIGATION_STATE_AUTO_TAKEOFF = 17;
	static const uint8_t NAVIGATION_STATE_AUTO_LAND = 18;
	static const uint8_t NAVIGATION_STATE_AUTO_FOLLOW_TARGET = 19;
	static const uint8_t NAVIGATION_STATE_MAX = 20;
	static const uint8_t RC_IN_MODE_DEFAULT = 0;
	static const uint8_t RC_IN_MODE_OFF = 1;
	static const uint8_t RC_IN_MODE_GENERATED = 2;

#endif
};

struct mission_item_s {             //是可能存储任务的结构体
	bool altitude_is_relative;	    /**< true if altitude is relative from start point	*/
	double lat;			             /**< latitude in degrees				*/
	double lon;			             /**< longitude in degrees				*/
	float altitude;			         /**< altitude in meters	(AMSL)			*/
	float yaw;			            /**< in radians NED -PI..+PI, NAN means don't change yaw		*/
	float loiter_radius;		    /**< loiter radius in meters, 0 for a VTOL to hover     */
	int8_t loiter_direction;     	/**< 1: positive / clockwise, -1, negative.		*/
	bool loiter_exit_xtrack;	      /**< exit xtrack location: 0 for center of loiter wp, 1 for exit location */
	enum NAV_CMD nav_cmd;		      /**< navigation command					*/
	float acceptance_radius;	      /**< default radius in which the mission is accepted as reached in meters 到达指定位置的绝对误差*/
	float time_inside;		         /**< time that the MAV should stay inside the radius before advancing in seconds */
	float pitch_min;		        /**< minimal pitch angle for fixed wing takeoff waypoints */
	bool autocontinue;		         /**< true if next waypoint should follow after this one 这一个点到达后 自动跟随下一个个点*/
	unsigned origin;		          /**< where the waypoint has been generated		*/
	int do_jump_mission_index;	        /**< index where the do jump will go to                 */
	unsigned do_jump_repeat_count;	/**< how many times do jump needs to be done            */
	unsigned do_jump_current_count;	/**< count how many times the jump has been done	*/
	float params[7];		        /**< array to store mission command values for MAV_FRAME_MISSION MAVLINK框架下存储 任务命令值 的数组***/
	int8_t frame;			        /**< mission frame ***/
	bool force_heading;		         /**< heading needs to be reached 无人机的朝向是否需要到达目标位置***/
};


struct mission_s {
	uint64_t timestamp; // required for logger
	int32_t dataman_id;
	uint32_t count;
	int32_t current_seq;  //现在的序列数
	uint8_t _padding0[4]; // required for logger

};

//不知道声明后的默认数值是多少，是否为uint32_t的默认数值

