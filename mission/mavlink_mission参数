MAVPACKED(
typedef struct __mavlink_mission_item_t {
 float param1; /*< PARAM1, see MAV_CMD enum*/
 float param2; /*< PARAM2, see MAV_CMD enum*/
 float param3; /*< PARAM3, see MAV_CMD enum*/
 float param4; /*< PARAM4, see MAV_CMD enum*/
 float x; /*< PARAM5 / local: x position, global: latitude*/
 float y; /*< PARAM6 / y position: global: longitude*/
 float z; /*< PARAM7 / z position: global: altitude (relative or absolute, depending on frame.*/
 uint16_t seq; /*< Sequence*/
 uint16_t command; /*< The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs*/
 uint8_t target_system; /*< System ID*/
 uint8_t target_component; /*< Component ID*/
 uint8_t frame; /*< The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h*/
 uint8_t current; /*< false:0, true:1*/
 uint8_t autocontinue; /*< autocontinue to next wp*/
}) mavlink_mission_item_t;

MAVPACKED(
    6: typedef struct __mavlink_mission_ack_t {
    7   uint8_t target_system; /*< System ID*/
    8   uint8_t target_component; /*< Component ID*/
    9   uint8_t type; /*< See MAV_MISSION_RESULT enum*/
   10: }) mavlink_mission_ack_t;
   
   MAVPACKED(
    6: typedef struct __mavlink_mission_current_t {
    7   uint16_t seq; /*< Sequence*/
    8: }) mavlink_mission_current_t;